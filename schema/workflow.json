{
  "$id": "https://serverlessworkflow.org/workflow-schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Serverless Workflow is a vendor-neutral specification for defining the model of workflows responsible for orchestrating event-driven serverless applications",
  "type": "object",
  "properties": {
    "id": {
      "type": "string",
      "description": "Workflow unique identifier",
      "minLength": 1
    },
    "name": {
      "type": "string",
      "description": "Workflow name",
      "minLength": 1
    },
    "description": {
      "type": "string",
      "description": "Workflow description"
    },
    "version": {
      "type": "string",
      "description": "Workflow version",
      "minLength": 1
    },
    "schemaVersion": {
      "type": "string",
      "description": "Serverless Workflow schema version",
      "minLength": 1
    },
    "dataInputSchema": {
      "type": "string",
      "format": "uri",
      "description": "URI to JSON Schema that workflow data input adheres to"
    },
    "dataOutputSchema": {
      "type": "string",
      "format": "uri",
      "description": "URI to JSON Schema that workflow data output adheres to"
    },
    "metadata": {
      "$ref": "common.json#/definitions/metadata"
    },
    "events": {
      "$ref": "events.json#/definitions/events"
    },
    "functions": {
      "$ref": "functions.json#/definitions/functions"
    },
    "states": {
      "type": "array",
      "description": "State definitions",
      "items": {
        "anyOf": [
          {
            "title": "Delay State",
            "$ref": "#/definitions/delaystate"
          },
          {
            "title": "Event State",
            "$ref": "#/definitions/eventstate"
          },
          {
            "title": "Operation State",
            "$ref": "#/definitions/operationstate"
          },
          {
            "title": "Parallel State",
            "$ref": "#/definitions/parallelstate"
          },
          {
            "title": "Switch State",
            "$ref": "#/definitions/switchstate"
          },
          {
            "title": "SubFlow State",
            "$ref": "#/definitions/subflowstate"
          },
          {
            "title": "Inject State",
            "$ref": "#/definitions/injectstate"
          },
          {
            "title": "ForEach State",
            "$ref": "#/definitions/foreachstate"
          },
          {
            "title": "Callback State",
            "$ref": "#/definitions/callbackstate"
          }
        ]
      }
    },
    "extensions": {
      "type": "array",
      "description": "Workflow extensions",
      "items": {
        "type": "object"
      }
    }
  },
  "required": [
    "id",
    "name",
    "version",
    "states"
  ],
  "definitions": {
    "transition": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "string",
          "description": "JsonPath expression. Evaluates to true if returns non-empty result"
        },
        "produceEvent": {
          "description": "Reference one of the defined 'produced' events by name and set its payload and context attributes",
          "$ref": "#/definitions/produceevent"
        },
        "nextState": {
          "type": "string",
          "description": "Name of state to transition to",
          "minLength": 1
        }
      },
      "required": [
        "nextState"
      ]
    },
    "error": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "string",
          "description": "JsonPath expression. Evaluated against error data. Is true if returns non empty result"
        },
        "errorDataFilter": {
          "$ref": "#/definitions/errordatafilter"
        },
        "transition": {
          "description": "Next transition of the workflow when expression is matched",
          "$ref": "#/definitions/transition"
        }
      },
      "required": [
        "expression",
        "transition"
      ]
    },
    "eventactions": {
      "type": "object",
      "properties": {
        "eventRefs": {
          "type" : "array",
          "description": "References one or more unique event names in the defined workflow events",
          "minItems": 1,
          "items": {
            "type": "string"
          }
        },
        "actionMode": {
          "type": "string",
          "enum": [
            "sequential",
            "parallel"
          ],
          "description": "Specifies how actions are to be performed (in sequence of parallel)",
          "default": "sequential"
        },
        "actions": {
          "type": "array",
          "description": "Actions to be performed if expression matches",
          "items": {
            "type": "object",
            "$ref": "#/definitions/action"
          }
        },
        "eventDataFilter": {
          "$ref": "#/definitions/eventdatafilter"
        }
      },
      "required": [
        "eventRefs",
        "actions"
      ]
    },
    "action": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique action definition name"
        },
        "functionRef": {
          "description": "References a reusable function definition",
          "$ref": "#/definitions/functionref"
        },
        "eventRef": {
          "description": "References a 'trigger' and 'result' reusable event definitions",
          "$ref": "#/definitions/eventref"
        },
        "timeout": {
          "type": "string",
          "description": "Time period to wait for function execution to complete"
        },
        "actionDataFilter": {
          "$ref": "#/definitions/actiondatafilter"
        }
      },
      "oneOf": [
        {
          "required": [
            "functionRef"
          ]
        },
        {
          "required": [
            "eventRef"
          ]
        }
      ]
    },
    "retry": {
      "type": "object",
      "description": "Retry Definition",
      "properties": {
        "expression": {
          "type": "string",
          "description": "JsonPath expression. Evaluated against state data. Is true if returns non empty data"
        },
        "interval": {
          "type": "string",
          "description": "Interval value for retry (ISO 8601 repeatable format)"
        },
        "multiplier": {
          "type": "string",
          "description": "Multiplier value by which interval increases during each attempt (ISO 8601 time format)"
        },
        "maxAttempts": {
          "type": "integer",
          "default": 1,
          "minimum": 0,
          "description": "Maximum number of retry attempts (1 by default). Value of 0 means no retries are performed"
        }
      },
      "required": [
        "expression"
      ]
    },
    "functionref": {
      "type": "object",
      "description": "Function Reference",
      "properties": {
        "refName": {
          "type": "string",
          "description": "Name of the referenced function"
        },
        "parameters": {
          "type": "object",
          "description": "Function parameters"
        }
      },
      "required": [
        "refName"
      ]
    },
    "eventref": {
      "type": "object",
      "description": "Event References",
      "properties": {
        "triggerEventRef": {
          "type": "string",
          "description": "Reference to the unique name of a 'produced' event definition"
        },
        "resultEventRef": {
          "type": "string",
          "description": "Reference to the unique name of a 'consumed' event definition"
        },
        "data": {
          "type": ["string", "object"],
          "description": "If String, expression which selects parts of the states data output to become the data of the produced event. If object a custom object to become the data of produced event."
        },
        "contextAttributes": {
          "type": "object",
          "description": "Add additional extension context attributes to the produced event",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "triggerEventRef",
        "resultEventRef"
      ]
    },
    "branch": {
      "type": "object",
      "description": "Branch Definition",
      "properties": {
        "name": {
          "type": "string",
          "description": "Branch name"
        },
        "actions": {
          "type": "array",
          "description": "Actions to be executed in this branch",
          "items": {
            "type": "object",
            "$ref": "#/definitions/action"
          }
        },
        "states": {
          "type": "array",
          "description": "States to be executed in this branch",
          "items": {
            "anyOf": [
              {
                "title": "Delay State",
                "$ref": "#/definitions/delaystate"
              },
              {
                "title": "Event State",
                "$ref": "#/definitions/eventstate"
              },
              {
                "title": "Operation State",
                "$ref": "#/definitions/operationstate"
              },
              {
                "title": "Switch State",
                "$ref": "#/definitions/switchstate"
              },
              {
                "title": "SubFlow State",
                "$ref": "#/definitions/subflowstate"
              },
              {
                "title": "Inject State",
                "$ref": "#/definitions/injectstate"
              },
              {
                "title": "ForEach State",
                "$ref": "#/definitions/foreachstate"
              },
              {
                "title": "Callback State",
                "$ref": "#/definitions/callbackstate"
              }
            ]
          }
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "states"
          ]
        },
        {
          "required": [
            "name",
            "actions"
          ]
        }
      ]
    },
    "delaystate": {
      "type": "object",
      "description": "Causes the workflow execution to delay for a specified duration",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique State id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "enum": [
            "delay"
          ],
          "description": "State type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "State end definition"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "timeDelay": {
          "type": "string",
          "description": "Amount of time (ISO 8601 format) to delay"
        },
        "onError": {
          "type": "array",
          "description": "OnError Definition",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "transition": {
          "description": "Next transition of the workflow after the time delay",
          "$ref": "#/definitions/transition"
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data output adheres to"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "timeDelay",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "timeDelay",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "timeDelay",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "timeDelay",
            "end"
          ]
        }
      ]
    },
    "eventstate": {
      "type": "object",
      "description": "This state is used to wait for events from event sources, then consumes them and invoke one or more actions to run in sequence or parallel",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique State id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "enum": [
            "event"
          ],
          "description": "State type"
        },
        "exclusive": {
          "type": "boolean",
          "default": true,
          "description": "If true consuming one of the defined events causes its associated actions to be performed. If false all of the defined events must be consumed in order for actions to be performed"
        },
        "eventsActions": {
          "type": "array",
          "description": "Define what events trigger one or more actions to be performed",
          "items": {
            "type": "object",
            "$ref": "#/definitions/eventactions"
          }
        },
        "timeout": {
          "type": "string",
          "description": "Time period to wait for incoming events (ISO 8601 format)"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "retry": {
          "type": "array",
          "description": "Retry Definition",
          "items": {
            "type": "object",
            "$ref": "#/definitions/retry"
          }
        },
        "onError": {
          "type": "array",
          "description": "States error handling definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data output adheres to"
        },
        "transition": {
          "description": "Next transition of the workflow after all the actions have been performed",
          "$ref": "#/definitions/transition"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "State end definition"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "eventsActions",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "eventsActions",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "eventsActions",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "eventsActions",
            "end"
          ]
        }
      ]
    },
    "operationstate": {
      "type": "object",
      "description": "Defines actions be performed. Does not wait for incoming events",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique State id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "enum": [
            "operation"
          ],
          "description": "State type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "State end definition"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "actionMode": {
          "type": "string",
          "enum": [
            "sequential",
            "parallel"
          ],
          "description": "Specifies whether actions are performed in sequence or in parallel",
          "default": "sequential"
        },
        "actions": {
          "type": "array",
          "description": "Actions to be performed",
          "items": {
            "type": "object",
            "$ref": "#/definitions/action"
          }
        },
        "retry": {
          "type": "array",
          "description": "Retry Definition",
          "items": {
            "type": "object",
            "$ref": "#/definitions/retry"
          }
        },
        "onError": {
          "type": "array",
          "description": "States error handling definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "transition": {
          "description": "Next transition of the workflow after all the actions have been performed",
          "$ref": "#/definitions/transition"
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data output adheres to"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "actionMode",
            "actions",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "actionMode",
            "actions",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "actionMode",
            "actions",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "actionMode",
            "actions",
            "end"
          ]
        }
      ]
    },
    "parallelstate": {
      "type": "object",
      "description": "Consists of a number of states that are executed in parallel",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique State id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "enum": [
            "parallel"
          ],
          "description": "State type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "State end definition"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "branches": {
          "type": "array",
          "description": "Branch Definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/branch"
          }
        },
        "completionType": {
          "type" : "string",
          "enum": ["and", "xor", "n_of_m"],
          "description": "Option types on how to complete branch execution.",
          "default": "and"
        },
        "n": {
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Used when completionType is set to 'n_of_m' to specify the 'N' value"
        },
        "retry": {
          "type": "array",
          "description": "Retry Definition",
          "items": {
            "type": "object",
            "$ref": "#/definitions/retry"
          }
        },
        "onError": {
          "type": "array",
          "description": "States error handling definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "transition": {
          "description": "Next transition of the workflow after all branches have completed execution",
          "$ref": "#/definitions/transition"
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data output adheres to"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "branches",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "branches",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "branches",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "branches",
            "transition",
            "end"
          ]
        }
      ]
    },
    "switchstate": {
      "oneOf": [
        {
          "$ref": "#/definitions/databasedswitch"
        },
        {
          "$ref": "#/definitions/eventbasedswitch"
        }
      ]
    },
    "eventbasedswitch": {
      "type": "object",
      "description": "Permits transitions to other states based on events",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique State id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "enum": [
            "switch"
          ],
          "description": "State type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "eventConditions": {
          "type": "array",
          "description": "Defines conditions evaluated against events",
          "items": {
            "type": "object",
            "$ref": "#/definitions/eventcondition"
          }
        },
        "onError": {
          "type": "array",
          "description": "States error handling definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "eventTimeout": {
          "type": "string",
          "description": "If eventConditions is used, defines the time period to wait for events (ISO 8601 format)"
        },
        "default": {
          "description": "Next transition of the workflow if there is no matching data conditions, or event timeout is reached",
          "$ref": "#/definitions/transition"
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data output adheres to"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "eventConditions",
            "default"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "eventConditions",
            "default"
          ]
        }
      ]
    },
    "databasedswitch": {
      "type": "object",
      "description": "Permits transitions to other states based on data conditions",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique State id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "enum": [
            "switch"
          ],
          "description": "State type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "dataConditions": {
          "type": "array",
          "description": "Defines conditions evaluated against state data",
          "items": {
            "type": "object",
            "$ref": "#/definitions/datacondition"
          }
        },
        "onError": {
          "type": "array",
          "description": "States error handling definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "default": {
          "description": "Next transition of the workflow if there is no matching data conditions, or event timeout is reached",
          "$ref": "#/definitions/transition"
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data output adheres to"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "dataConditions",
            "default"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "dataConditions",
            "default"
          ]
        }
      ]
    },
    "eventcondition": {
      "type": "object",
      "description": "Switch state data event condition",
      "properties": {
        "eventRef": {
          "type" : "string",
          "description": "References an unique event name in the defined workflow events"
        },
        "transition": {
          "description": "Next transition of the workflow if there is valid matches",
          "$ref": "#/definitions/transition"
        }
      },
      "eventDataFilter": {
        "description": "Event data filter definition",
        "$ref": "#/definitions/eventdatafilter"
      },
      "metadata": {
        "$ref": "common.json#/definitions/metadata"
      },
      "required": ["eventRef", "transition"]
    },
    "datacondition": {
      "type": "object",
      "description": "Switch state data based condition",
      "properties": {
        "path": {
          "type": "string",
          "description": "JsonPath expression that selects elements of state data"
        },
        "value": {
          "type": "string",
          "description": "Matching value"
        },
        "operator": {
          "type" : "string",
          "enum": ["exists", "notexists", "null", "notnull", "equals", "notequals", "lessthan", "lessthanorequals", "greaterthan", "greaterthanorequals", "matches", "notmatches", "custom"],
          "description": "Condition operator"
        },
        "transition": {
          "description": "Next transition of the workflow if there is valid matches",
          "$ref": "#/definitions/transition"
        }
      },
      "metadata": {
        "$ref": "common.json#/definitions/metadata"
      },
      "required": ["path", "value", "operator", "transition"]
    },
    "subflowstate": {
      "type": "object",
      "description": "Defines a sub-workflow to be executed",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique state id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "enum": [
            "subflow"
          ],
          "description": "State type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "State end definition"
        },
        "waitForCompletion": {
          "type": "boolean",
          "default": false,
          "description": "Workflow execution must wait for sub-workflow to finish before continuing"
        },
        "workflowId": {
          "type": "string",
          "description": "Sub-workflow unique id"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "onError": {
          "type": "array",
          "description": "States error handling definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "transition": {
          "description": "Next transition of the workflow after SubFlow has completed execution",
          "$ref": "#/definitions/transition"
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data output adheres to"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "workflowId",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "workflowId",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "workflowId",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "workflowId",
            "end"
          ]
        }
      ]
    },
    "injectstate": {
      "type": "object",
      "description": "Inject static data into state data. Does not perform any actions",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique state id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "enum": [
            "inject"
          ],
          "description": "State type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "State end definition"
        },
        "data": {
          "type": "object",
          "description": "JSON object which can be set as states data input and can be manipulated via filters"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "transition": {
          "description": "Next transition of the workflow after subflow has completed",
          "$ref": "#/definitions/transition"
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data output adheres to"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "end"
          ]
        }
      ]
    },
    "foreachstate": {
      "type": "object",
      "description": "Execute a set of defined states for each element of the data input array",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique State id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "enum": [
            "foreach"
          ],
          "description": "State type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "State end definition"
        },
        "inputCollection": {
          "type": "string",
          "description": "JsonPath expression selecting a JSON array element of the states data input"
        },
        "outputCollection": {
          "type": "string",
          "description": "JsonPath expression specifying where in the states data output to place the final data output of each iteration of the executed states"
        },
        "inputParameter": {
          "type": "string",
          "description": "JsonPath expression specifying a JSON object field of the states data input. For each parallel iteration, this field will get populated with a unique element of the inputCollection array"
        },
        "max": {
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Specifies how upper bound on how many iterations may run in parallel"
        },
        "timeDelay": {
          "type": "string",
          "description": "Amount of time (ISO 8601 format) to wait between each iteration "
        },
        "actions": {
          "type": "array",
          "description": "Actions to be executed for each of the elements of inputCollection",
          "items": {
            "type": "object",
            "$ref": "#/definitions/action"
          }
        },
        "states": {
          "type": "array",
          "description": "States to be executed for each of the elements of inputCollection",
          "items": {
            "anyOf": [
              {
                "title": "Delay State",
                "$ref": "#/definitions/delaystate"
              },
              {
                "title": "Event State",
                "$ref": "#/definitions/eventstate"
              },
              {
                "title": "Operation State",
                "$ref": "#/definitions/operationstate"
              },
              {
                "title": "Switch State",
                "$ref": "#/definitions/switchstate"
              },
              {
                "title": "SubFlow State",
                "$ref": "#/definitions/subflowstate"
              },
              {
                "title": "Inject State",
                "$ref": "#/definitions/injectstate"
              },
              {
                "title": "ForEach State",
                "$ref": "#/definitions/foreachstate"
              },
              {
                "title": "Callback State",
                "$ref": "#/definitions/callbackstate"
              }
            ]
          }
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "retry": {
          "type": "array",
          "description": "Retry Definition",
          "items": {
            "type": "object",
            "$ref": "#/definitions/retry"
          }
        },
        "onError": {
          "type": "array",
          "description": "States error handling definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "transition": {
          "description": "Next transition of the workflow after state has completed",
          "$ref": "#/definitions/transition"
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data output adheres to"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "inputCollection",
            "inputParameter",
            "states",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "inputCollection",
            "inputParameter",
            "states",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "inputCollection",
            "inputParameter",
            "states",
            "end"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "inputCollection",
            "inputParameter",
            "states",
            "transition"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "inputCollection",
            "inputParameter",
            "actions",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "inputCollection",
            "inputParameter",
            "actions",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "inputCollection",
            "inputParameter",
            "actions",
            "end"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "inputCollection",
            "inputParameter",
            "actions",
            "transition"
          ]
        }
      ]
    },
    "callbackstate": {
      "type": "object",
      "description": "This state performs an action, then waits for the callback event that denotes completion of the action",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique state id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type" : "string",
          "enum": ["callback"],
          "description": "State type"
        },
        "action": {
          "description": "Defines the action to be executed",
          "$ref": "#/definitions/action"
        },
        "eventRef": {
          "type" : "string",
          "description": "References an unique callback event name in the defined workflow events"
        },
        "timeout": {
          "type": "string",
          "description": "Time period to wait for incoming events (ISO 8601 format)"
        },
        "eventDataFilter": {
          "description": "Callback event data filter definition",
          "$ref": "#/definitions/eventdatafilter"
        },
        "stateDataFilter": {
          "description": "State data filter definition",
          "$ref": "#/definitions/statedatafilter"
        },
        "retry": {
          "type": "array",
          "description": "States retry definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/retry"
          }
        },
        "onError": {
          "type": "array",
          "description": "States error handling definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "dataInputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data input adheres to"
        },
        "dataOutputSchema": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that state data output adheres to"
        },
        "transition": {
          "description": "Next transition of the workflow after all the actions have been performed",
          "$ref": "#/definitions/transition"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "State end definition"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "action",
            "eventRef",
            "timeout",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "action",
            "eventRef",
            "timeout",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "action",
            "eventRef",
            "timeout",
            "end"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "action",
            "eventRef",
            "timeout",
            "transition"
          ]
        }
      ]
    },
    "start": {
      "type": "object",
      "description": "State start definition",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "default",
            "scheduled"
          ],
          "description": "Kind of start definition"
        },
        "schedule": {
          "description": "If kind is 'scheduled', define when the time/repeating intervals at which workflow instances can/should be started",
          "$ref": "#/definitions/schedule"
        }
      },
      "if": {
        "properties": {
          "kind": {
            "const": "scheduled"
          }
        }
      },
      "then": {
        "required": [
          "kind",
          "schedule"
        ]
      },
      "else": {
        "required": [
          "kind"
        ]
      }
    },
    "schedule": {
      "type": "object",
      "description": "Start state schedule definition",
      "properties": {
        "interval": {
          "type": "string",
          "description":  "Time interval (ISO 8601 format) describing when the workflow starting state is active"
        },
        "cron": {
          "type": "string",
          "description":  "Repeating interval (cron expression) describing when the workflow starting state should be triggered"
        },
        "directInvoke": {
          "description": "Define if workflow instances can be created outside of the defined interval/cron",
          "type": "string",
          "enum": [
            "allow",
            "deny"
          ]
        },
        "timezone": {
          "type": "string",
          "description":  "Timezone name used to evaluate the cron expression. Not used for interval as timezone can be specified there directly. If not specified, should default to local machine timezone."
        }
      },
      "oneOf": [
        {
          "required": [
            "interval",
            "directInvoke"
          ]
        },
        {
          "required": [
            "cron",
            "directInvoke"
          ]
        }
      ]
    },
    "end": {
      "type": "object",
      "description": "State end definition",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "default",
            "terminate",
            "event"
          ],
          "description": "Kind of end definition"
        },
        "produceEvent": {
          "description": "If end kind is event, select one of the defined 'produced' events by name and set its data",
          "$ref": "#/definitions/produceevent"
        }
      },
      "if": {
        "properties": {
          "kind": {
            "const": "event"
          }
        }
      },
      "then": {
        "required": [
          "kind",
          "produceEvent"
        ]
      },
      "else": {
        "required": [
          "kind"
        ]
      }
    },
    "produceevent": {
      "type": "object",
      "description": "Produce an event and set its data",
      "properties": {
        "eventRef": {
          "type": "string",
          "description": "References a name of a defined event"
        },
        "data": {
          "type": ["string", "object"],
          "description": "If String, expression which selects parts of the states data output to become the data of the produced event. If object a custom object to become the data of produced event."
        },
        "contextAttributes": {
          "type": "object",
          "description": "Add additional event extension context attributes",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "eventRef"
      ]
    },
    "statedatafilter": {
      "type": "object",
      "properties": {
        "dataInputPath": {
          "type": "string",
          "description": "JsonPath definition that selects parts of the states data input"
        },
        "dataOutputPath": {
          "type": "string",
          "description": "JsonPath definition that selects parts of the states data output"
        }
      },
      "required": []
    },
    "eventdatafilter": {
      "type": "object",
      "properties": {
        "dataOutputPath": {
          "type": "string",
          "description": "JsonPath definition that selects parts of the event data, to be merged with the states data"
        }
      },
      "required": []
    },
    "actiondatafilter": {
      "type": "object",
      "properties": {
        "dataInputPath": {
          "type": "string",
          "description": "JsonPath definition that selects parts of the states data input to be the action data"
        },
        "dataResultsPath": {
          "type": "string",
          "description": "JsonPath definition that selects parts of the actions data result, to be merged with the states data"
        }
      },
      "required": []
    },
    "errordatafilter": {
      "type": "object",
      "properties": {
        "dataOutputPath": {
          "type": "string",
          "description": "JsonPath definition that selects parts of the error data, to be merged with the states data"
        }
      },
      "required": []
    }
  }
}
