{
  "$id": "https://serverlessworkflow.org/core/workflow.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Serverless Workflow specification - workflow schema",
  "type": "object",
  "oneOf": [
    {
      "properties": {
        "id": {
          "type": "string",
          "description": "Workflow unique identifier",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "Workflow name",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "Workflow description"
        },
        "version": {
          "type": "string",
          "description": "Workflow version",
          "minLength": 1
        },
        "schemaVersion": {
          "type": "string",
          "description": "Serverless Workflow schema version",
          "minLength": 1
        },
        "dataSchema": {
          "$ref": "#/definitions/dataschema"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        },
        "events": {
          "$ref": "events.json#/events"
        },
        "functions": {
          "$ref": "functions.json#/functions"
        },
        "retries": {
          "$ref": "retries.json#/retries"
        },
        "states": {
          "type": "array",
          "description": "State definitions",
          "items": {
            "anyOf": [
              {
                "title": "Delay State",
                "$ref": "#/definitions/delaystate"
              },
              {
                "title": "Event State",
                "$ref": "#/definitions/eventstate"
              },
              {
                "title": "Operation State",
                "$ref": "#/definitions/operationstate"
              },
              {
                "title": "Parallel State",
                "$ref": "#/definitions/parallelstate"
              },
              {
                "title": "Switch State",
                "$ref": "#/definitions/switchstate"
              },
              {
                "title": "SubFlow State",
                "$ref": "#/definitions/subflowstate"
              },
              {
                "title": "Inject State",
                "$ref": "#/definitions/injectstate"
              },
              {
                "title": "ForEach State",
                "$ref": "#/definitions/foreachstate"
              },
              {
                "title": "Callback State",
                "$ref": "#/definitions/callbackstate"
              }
            ]
          },
          "minItems": 1
        }
      }
    },
    {
      "properties": {
        "id": {
          "type": "string",
          "description": "Workflow unique identifier",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "Workflow name",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "Workflow description"
        },
        "version": {
          "type": "string",
          "description": "Workflow version",
          "minLength": 1
        },
        "schemaVersion": {
          "type": "string",
          "description": "Serverless Workflow schema version",
          "minLength": 1
        },
        "dataSchema": {
          "$ref": "#/definitions/dataschema"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        },
        "events": {
          "type": "string",
          "format": "uri",
          "description": "URI to a resource containing event definitions (json or yaml)"
        },
        "functions": {
          "type": "string",
          "format": "uri",
          "description": "URI to a resource containing function definitions (json or yaml)"
        },
        "states": {
          "type": "array",
          "description": "State definitions",
          "items": {
            "anyOf": [
              {
                "title": "Delay State",
                "$ref": "#/definitions/delaystate"
              },
              {
                "title": "Event State",
                "$ref": "#/definitions/eventstate"
              },
              {
                "title": "Operation State",
                "$ref": "#/definitions/operationstate"
              },
              {
                "title": "Parallel State",
                "$ref": "#/definitions/parallelstate"
              },
              {
                "title": "Switch State",
                "$ref": "#/definitions/switchstate"
              },
              {
                "title": "SubFlow State",
                "$ref": "#/definitions/subflowstate"
              },
              {
                "title": "Inject State",
                "$ref": "#/definitions/injectstate"
              },
              {
                "title": "ForEach State",
                "$ref": "#/definitions/foreachstate"
              },
              {
                "title": "Callback State",
                "$ref": "#/definitions/callbackstate"
              }
            ]
          },
          "minItems": 1
        }
      }
    }
  ],
  "required": [
    "id",
    "name",
    "version",
    "states"
  ],
  "definitions": {
    "crondef": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "string",
          "description": "Repeating interval (cron expression) describing when the workflow instance should be created",
          "minLength": 1
        },
        "validUntil": {
          "type": "string",
          "description": "Specific date and time (ISO 8601 format) when the cron expression invocation is no longer valid",
          "minLength": 1
        }
      },
      "required": [
        "expression"
      ]
    },
    "transition": {
      "oneOf": [
        {
          "type": "string",
          "description": "Name of state to transition to",
          "minLength": 1
        },
        {
          "type": "object",
          "description": "Function Reference",
          "properties": {
            "nextState": {
              "type": "string",
              "description": "Name of state to transition to",
              "minLength": 1
            },
            "produceEvents": {
              "type": "array",
              "description": "Array of events to be produced before the transition happens",
              "items": {
                "type": "object",
                "$ref": "#/definitions/produceeventdef"
              }
            },
            "compensate": {
              "type": "boolean",
              "default": false,
              "description": "If set to true, triggers workflow compensation when before this transition is taken. Default is false"
            }
          },
          "required": [
            "nextState"
          ]
        }
      ]
    },
    "error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "description": "Domain-specific error name, or '*' to indicate all possible errors",
          "minLength": 1
        },
        "code": {
          "type": "string",
          "description": "Error code. Can be used in addition to the name to help runtimes resolve to technical errors/exceptions. Should not be defined if error is set to '*'",
          "minLength": 1
        },
        "retryRef": {
          "type": "string",
          "description": "References a unique name of a retry definition.",
          "minLength": 1
        },
        "transition": {
          "description": "Transition to next state to handle the error. If retryRef is defined, this transition is taken only if retries were unsuccessful.",
          "$ref": "#/definitions/transition"
        },
        "end": {
          "description": "End workflow execution in case of this error. If retryRef is defined, this ends workflow only if retries were unsuccessful.",
          "$ref": "#/definitions/end"
        }
      },
      "oneOf": [
        {
          "required": [
            "error",
            "transition"
          ]
        },
        {
          "required": [
            "error",
            "end"
          ]
        }
      ]
    },
    "onevents": {
      "type": "object",
      "properties": {
        "eventRefs": {
          "type" : "array",
          "description": "References one or more unique event names in the defined workflow events",
          "minItems": 1,
          "items": {
            "type": "string"
          }
        },
        "actionMode": {
          "type": "string",
          "enum": [
            "sequential",
            "parallel"
          ],
          "description": "Specifies how actions are to be performed (in sequence of parallel)",
          "default": "sequential"
        },
        "actions": {
          "type": "array",
          "description": "Actions to be performed if expression matches",
          "items": {
            "type": "object",
            "$ref": "#/definitions/action"
          }
        },
        "eventDataFilter": {
          "$ref": "#/definitions/eventdatafilter"
        }
      },
      "required": [
        "eventRefs",
        "actions"
      ]
    },
    "action": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique action definition name"
        },
        "functionRef": {
          "oneOf": [
            {
              "type": "string",
              "description": "Name of the referenced function",
              "minLength": 1
            },
            {
              "type": "object",
              "description": "Function Reference",
              "properties": {
                "refName": {
                  "type": "string",
                  "description": "Name of the referenced function"
                },
                "parameters": {
                  "type": "object",
                  "description": "Function parameters"
                }
              },
              "required": [
                "refName"
              ]
            }
          ]
        },
        "eventRef": {
          "description": "References a 'trigger' and 'result' reusable event definitions",
          "$ref": "#/definitions/eventref"
        },
        "timeout": {
          "type": "string",
          "description": "Time period to wait for function execution to complete"
        },
        "actionDataFilter": {
          "$ref": "#/definitions/actiondatafilter"
        }
      },
      "oneOf": [
        {
          "required": [
            "functionRef"
          ]
        },
        {
          "required": [
            "eventRef"
          ]
        }
      ]
    },
    "eventref": {
      "type": "object",
      "description": "Event References",
      "properties": {
        "triggerEventRef": {
          "type": "string",
          "description": "Reference to the unique name of a 'produced' event definition"
        },
        "resultEventRef": {
          "type": "string",
          "description": "Reference to the unique name of a 'consumed' event definition"
        },
        "data": {
          "type": ["string", "object"],
          "description": "If string type, an expression which selects parts of the states data output to become the data (payload) of the event referenced by 'triggerEventRef'. If object type, a custom object to become the data (payload) of the event referenced by 'triggerEventRef'."
        },
        "contextAttributes": {
          "type": "object",
          "description": "Add additional extension context attributes to the produced event",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "triggerEventRef",
        "resultEventRef"
      ]
    },
    "branch": {
      "type": "object",
      "description": "Branch Definition",
      "properties": {
        "name": {
          "type": "string",
          "description": "Branch name"
        },
        "actions": {
          "type": "array",
          "description": "Actions to be executed in this branch",
          "items": {
            "type": "object",
            "$ref": "#/definitions/action"
          }
        },
        "workflowId": {
          "type": "string",
          "description": "Unique Id of a workflow to be executed in this branch"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "workflowId"
          ]
        },
        {
          "required": [
            "name",
            "actions"
          ]
        }
      ]
    },
    "delaystate": {
      "type": "object",
      "description": "Causes the workflow execution to delay for a specified duration",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique State id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "const": "delay",
          "description": "State type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "State end definition"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "timeDelay": {
          "type": "string",
          "description": "Amount of time (ISO 8601 format) to delay"
        },
        "onErrors": {
          "type": "array",
          "description": "States error handling and retries definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "transition": {
          "description": "Next transition of the workflow after the time delay",
          "$ref": "#/definitions/transition"
        },
        "dataSchema": {
          "$ref": "#/definitions/dataschema"
        },
        "compensatedBy": {
          "type": "string",
          "minLength": 1,
          "description": "Unique Name of a workflow state which is responsible for compensation of this state"
        },
        "usedForCompensation": {
          "type": "boolean",
          "default": false,
          "description": "If true, this state is used to compensate another state. Default is false"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "if": {
        "properties": {
          "usedForCompensation": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "name",
          "type",
          "timeDelay"
        ]
      },
      "else": {
        "oneOf": [
          {
            "required": [
              "name",
              "type",
              "timeDelay",
              "end"
            ]
          },
          {
            "required": [
              "name",
              "type",
              "timeDelay",
              "transition"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "timeDelay",
              "transition"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "timeDelay",
              "end"
            ]
          }
        ]
      }
    },
    "eventstate": {
      "type": "object",
      "description": "This state is used to wait for events from event sources, then consumes them and invoke one or more actions to run in sequence or parallel",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique State id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "const": "event",
          "description": "State type"
        },
        "exclusive": {
          "type": "boolean",
          "default": true,
          "description": "If true consuming one of the defined events causes its associated actions to be performed. If false all of the defined events must be consumed in order for actions to be performed"
        },
        "onEvents": {
          "type": "array",
          "description": "Define what events trigger one or more actions to be performed",
          "items": {
            "type": "object",
            "$ref": "#/definitions/onevents"
          }
        },
        "timeout": {
          "type": "string",
          "description": "Time period to wait for incoming events (ISO 8601 format)"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "onErrors": {
          "type": "array",
          "description": "States error handling and retries definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "dataSchema": {
          "$ref": "#/definitions/dataschema"
        },
        "transition": {
          "description": "Next transition of the workflow after all the actions have been performed",
          "$ref": "#/definitions/transition"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "State end definition"
        },
        "compensatedBy": {
          "type": "string",
          "minLength": 1,
          "description": "Unique Name of a workflow state which is responsible for compensation of this state"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "onEvents",
            "end"
          ]
        },
        {
          "required": [
            "name",
            "type",
            "onEvents",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "onEvents",
            "transition"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "onEvents",
            "end"
          ]
        }
      ]
    },
    "operationstate": {
      "type": "object",
      "description": "Defines actions be performed. Does not wait for incoming events",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique State id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "const": "operation",
          "description": "State type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "State end definition"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "actionMode": {
          "type": "string",
          "enum": [
            "sequential",
            "parallel"
          ],
          "description": "Specifies whether actions are performed in sequence or in parallel",
          "default": "sequential"
        },
        "actions": {
          "type": "array",
          "description": "Actions to be performed",
          "items": {
            "type": "object",
            "$ref": "#/definitions/action"
          }
        },
        "onErrors": {
          "type": "array",
          "description": "States error handling and retries definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "transition": {
          "description": "Next transition of the workflow after all the actions have been performed",
          "$ref": "#/definitions/transition"
        },
        "dataSchema": {
          "$ref": "#/definitions/dataschema"
        },
        "compensatedBy": {
          "type": "string",
          "minLength": 1,
          "description": "Unique Name of a workflow state which is responsible for compensation of this state"
        },
        "usedForCompensation": {
          "type": "boolean",
          "default": false,
          "description": "If true, this state is used to compensate another state. Default is false"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "if": {
        "properties": {
          "usedForCompensation": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "name",
          "type",
          "actionMode",
          "actions"
        ]
      },
      "else": {
        "oneOf": [
          {
            "required": [
              "name",
              "type",
              "actionMode",
              "actions",
              "end"
            ]
          },
          {
            "required": [
              "name",
              "type",
              "actionMode",
              "actions",
              "transition"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "actionMode",
              "actions",
              "transition"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "actionMode",
              "actions",
              "end"
            ]
          }
        ]
      }
    },
    "parallelstate": {
      "type": "object",
      "description": "Consists of a number of states that are executed in parallel",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique State id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "const": "parallel",
          "description": "State type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "State end definition"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "branches": {
          "type": "array",
          "description": "Branch Definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/branch"
          }
        },
        "completionType": {
          "type" : "string",
          "enum": ["and", "xor", "n_of_m"],
          "description": "Option types on how to complete branch execution.",
          "default": "and"
        },
        "n": {
          "type": ["number","string"],
          "minimum": 0,
          "minLength": 0,
          "description": "Used when completionType is set to 'n_of_m' to specify the 'N' value"
        },
        "onErrors": {
          "type": "array",
          "description": "States error handling and retries definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "transition": {
          "description": "Next transition of the workflow after all branches have completed execution",
          "$ref": "#/definitions/transition"
        },
        "dataSchema": {
          "$ref": "#/definitions/dataschema"
        },
        "compensatedBy": {
          "type": "string",
          "minLength": 1,
          "description": "Unique Name of a workflow state which is responsible for compensation of this state"
        },
        "usedForCompensation": {
          "type": "boolean",
          "default": false,
          "description": "If true, this state is used to compensate another state. Default is false"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "if": {
        "properties": {
          "usedForCompensation": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "name",
          "type",
          "branches"
        ]
      },
      "else": {
        "oneOf": [
          {
            "required": [
              "name",
              "type",
              "branches",
              "end"
            ]
          },
          {
            "required": [
              "name",
              "type",
              "branches",
              "transition"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "branches",
              "transition"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "branches",
              "transition",
              "end"
            ]
          }
        ]
      }
    },
    "switchstate": {
      "oneOf": [
        {
          "$ref": "#/definitions/databasedswitch"
        },
        {
          "$ref": "#/definitions/eventbasedswitch"
        }
      ]
    },
    "eventbasedswitch": {
      "type": "object",
      "description": "Permits transitions to other states based on events",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique State id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "const": "switch",
          "description": "State type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "eventConditions": {
          "type": "array",
          "description": "Defines conditions evaluated against events",
          "items": {
            "type": "object",
            "$ref": "#/definitions/eventcondition"
          }
        },
        "onErrors": {
          "type": "array",
          "description": "States error handling and retries definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "eventTimeout": {
          "type": "string",
          "description": "If eventConditions is used, defines the time period to wait for events (ISO 8601 format)"
        },
        "default": {
          "description": "Default transition of the workflow if there is no matching data conditions. Can include a transition or end definition",
          "$ref": "#/definitions/defaultdef"
        },
        "dataSchema": {
          "$ref": "#/definitions/dataschema"
        },
        "compensatedBy": {
          "type": "string",
          "minLength": 1,
          "description": "Unique Name of a workflow state which is responsible for compensation of this state"
        },
        "usedForCompensation": {
          "type": "boolean",
          "default": false,
          "description": "If true, this state is used to compensate another state. Default is false"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "if": {
        "properties": {
          "usedForCompensation": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "name",
          "type",
          "eventConditions",
          "default"
        ]
      },
      "else": {
        "oneOf": [
          {
            "required": [
              "name",
              "type",
              "eventConditions",
              "default"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "eventConditions",
              "default"
            ]
          }
        ]
      }
    },
    "databasedswitch": {
      "type": "object",
      "description": "Permits transitions to other states based on data conditions",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique State id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "const": "switch",
          "description": "State type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "dataConditions": {
          "type": "array",
          "description": "Defines conditions evaluated against state data",
          "items": {
            "type": "object",
            "$ref": "#/definitions/datacondition"
          }
        },
        "onErrors": {
          "type": "array",
          "description": "States error handling and retries definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "default": {
          "description": "Default transition of the workflow if there is no matching data conditions. Can include a transition or end definition",
          "$ref": "#/definitions/defaultdef"
        },
        "dataSchema": {
          "$ref": "#/definitions/dataschema"
        },
        "compensatedBy": {
          "type": "string",
          "minLength": 1,
          "description": "Unique Name of a workflow state which is responsible for compensation of this state"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "oneOf": [
        {
          "required": [
            "name",
            "type",
            "dataConditions",
            "default"
          ]
        },
        {
          "required": [
            "start",
            "name",
            "type",
            "dataConditions",
            "default"
          ]
        }
      ]
    },
    "defaultdef": {
      "type": "object",
      "description": "Default definition. Can be either a transition or end definition",
      "properties": {
        "transition": {
          "$ref": "#/definitions/transition"
        },
        "end": {
          "$ref": "#/definitions/end"
        }
      },
      "oneOf": [
        {
          "required": [
            "transition"
          ]
        },
        {
          "required": [
            "end"
          ]
        }
      ]
    },
    "eventcondition": {
      "oneOf": [
        {
          "$ref": "#/definitions/transitioneventcondition"
        },
        {
          "$ref": "#/definitions/enddeventcondition"
        }
      ]
    },
    "transitioneventcondition": {
      "type": "object",
      "description": "Switch state data event condition",
      "properties": {
        "name": {
          "type": "string",
          "description": "Event condition name"
        },
        "eventRef": {
          "type" : "string",
          "description": "References an unique event name in the defined workflow events"
        },
        "transition": {
          "description": "Next transition of the workflow if there is valid matches",
          "$ref": "#/definitions/transition"
        }
      },
      "eventDataFilter": {
        "description": "Event data filter definition",
        "$ref": "#/definitions/eventdatafilter"
      },
      "metadata": {
        "$ref": "common.json#/definitions/metadata"
      },
      "required": ["eventRef", "transition"]
    },
    "enddeventcondition": {
      "type": "object",
      "description": "Switch state data event condition",
      "properties": {
        "name": {
          "type": "string",
          "description": "Event condition name"
        },
        "eventRef": {
          "type" : "string",
          "description": "References an unique event name in the defined workflow events"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "Explicit transition to end"
        }
      },
      "eventDataFilter": {
        "description": "Event data filter definition",
        "$ref": "#/definitions/eventdatafilter"
      },
      "metadata": {
        "$ref": "common.json#/definitions/metadata"
      },
      "required": ["eventRef", "transition"]
    },
    "datacondition": {
      "oneOf": [
        {
          "$ref": "#/definitions/transitiondatacondition"
        },
        {
          "$ref": "#/definitions/enddatacondition"
        }
      ]
    },
    "transitiondatacondition": {
      "type": "object",
      "description": "Switch state data based condition",
      "properties": {
        "name": {
          "type": "string",
          "description": "Data condition name"
        },
        "condition": {
          "type": "string",
          "description": "JsonPath expression evaluated against state data. True if results are not empty"
        },
        "transition": {
          "description": "Next transition of the workflow if there is valid matches",
          "$ref": "#/definitions/transition"
        }
      },
      "metadata": {
        "$ref": "common.json#/definitions/metadata"
      },
      "required": ["condition", "transition"]
    },
    "enddatacondition": {
      "type": "object",
      "description": "Switch state data based condition",
      "properties": {
        "name": {
          "type": "string",
          "description": "Data condition name"
        },
        "condition": {
          "type": "string",
          "description": "JsonPath expression evaluated against state data. True if results are not empty"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "Explicit transition to end"
        }
      },
      "metadata": {
        "$ref": "common.json#/definitions/metadata"
      },
      "required": ["condition", "end"]
    },
    "subflowstate": {
      "type": "object",
      "description": "Defines a sub-workflow to be executed",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique state id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "const": "subflow",
          "description": "State type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "State end definition"
        },
        "waitForCompletion": {
          "type": "boolean",
          "default": false,
          "description": "Workflow execution must wait for sub-workflow to finish before continuing"
        },
        "workflowId": {
          "type": "string",
          "description": "Sub-workflow unique id"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "onErrors": {
          "type": "array",
          "description": "States error handling and retries definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "transition": {
          "description": "Next transition of the workflow after SubFlow has completed execution",
          "$ref": "#/definitions/transition"
        },
        "dataSchema": {
          "$ref": "#/definitions/dataschema"
        },
        "compensatedBy": {
          "type": "string",
          "minLength": 1,
          "description": "Unique Name of a workflow state which is responsible for compensation of this state"
        },
        "usedForCompensation": {
          "type": "boolean",
          "default": false,
          "description": "If true, this state is used to compensate another state. Default is false"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "if": {
        "properties": {
          "usedForCompensation": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "name",
          "type",
          "workflowId"
        ]
      },
      "else": {
        "oneOf": [
          {
            "required": [
              "name",
              "type",
              "workflowId",
              "end"
            ]
          },
          {
            "required": [
              "name",
              "type",
              "workflowId",
              "transition"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "workflowId",
              "transition"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "workflowId",
              "end"
            ]
          }
        ]
      }
    },
    "injectstate": {
      "type": "object",
      "description": "Inject static data into state data. Does not perform any actions",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique state id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "const": "inject",
          "description": "State type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "State end definition"
        },
        "data": {
          "type": "object",
          "description": "JSON object which can be set as states data input and can be manipulated via filters"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "transition": {
          "description": "Next transition of the workflow after subflow has completed",
          "$ref": "#/definitions/transition"
        },
        "dataSchema": {
          "$ref": "#/definitions/dataschema"
        },
        "compensatedBy": {
          "type": "string",
          "minLength": 1,
          "description": "Unique Name of a workflow state which is responsible for compensation of this state"
        },
        "usedForCompensation": {
          "type": "boolean",
          "default": false,
          "description": "If true, this state is used to compensate another state. Default is false"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "if": {
        "properties": {
          "usedForCompensation": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "name",
          "type",
          "data"
        ]
      },
      "else": {
        "oneOf": [
          {
            "required": [
              "name",
              "type",
              "data",
              "end"
            ]
          },
          {
            "required": [
              "name",
              "type",
              "data",
              "transition"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "data",
              "transition"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "data",
              "end"
            ]
          }
        ]
      }
    },
    "foreachstate": {
      "type": "object",
      "description": "Execute a set of defined actions or workflows for each element of a data array",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique State id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type": "string",
          "const": "foreach",
          "description": "State type"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "State end definition"
        },
        "inputCollection": {
          "type": "string",
          "description": "JsonPath expression selecting an array element of the states data"
        },
        "outputCollection": {
          "type": "string",
          "description": "JsonPath expression specifying an array element of the states data to add the results of each iteration"
        },
        "iterationParam": {
          "type": "string",
          "description": "Name of the iteration parameter that can be referenced in actions/workflow. For each parallel iteration, this param should contain an unique element of the inputCollection array"
        },
        "max": {
          "type": ["number","string"],
          "minimum": 0,
          "minLength": 0,
          "description": "Specifies how upper bound on how many iterations may run in parallel"
        },
        "actions": {
          "type": "array",
          "description": "Actions to be executed for each of the elements of inputCollection",
          "items": {
            "type": "object",
            "$ref": "#/definitions/action"
          }
        },
        "workflowId": {
          "type": "string",
          "description": "Unique Id of a workflow to be executed for each of the elements of inputCollection"
        },
        "stateDataFilter": {
          "$ref": "#/definitions/statedatafilter"
        },
        "onErrors": {
          "type": "array",
          "description": "States error handling and retries definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "transition": {
          "description": "Next transition of the workflow after state has completed",
          "$ref": "#/definitions/transition"
        },
        "dataSchema": {
          "$ref": "#/definitions/dataschema"
        },
        "compensatedBy": {
          "type": "string",
          "minLength": 1,
          "description": "Unique Name of a workflow state which is responsible for compensation of this state"
        },
        "usedForCompensation": {
          "type": "boolean",
          "default": false,
          "description": "If true, this state is used to compensate another state. Default is false"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "if": {
        "properties": {
          "usedForCompensation": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "name",
          "type",
          "inputCollection",
          "inputParameter",
          "workflowId"
        ]
      },
      "else": {
        "oneOf": [
          {
            "required": [
              "name",
              "type",
              "inputCollection",
              "inputParameter",
              "workflowId",
              "end"
            ]
          },
          {
            "required": [
              "name",
              "type",
              "inputCollection",
              "inputParameter",
              "workflowId",
              "transition"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "inputCollection",
              "inputParameter",
              "workflowId",
              "end"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "inputCollection",
              "inputParameter",
              "workflowId",
              "transition"
            ]
          },
          {
            "required": [
              "name",
              "type",
              "inputCollection",
              "inputParameter",
              "actions",
              "end"
            ]
          },
          {
            "required": [
              "name",
              "type",
              "inputCollection",
              "inputParameter",
              "actions",
              "transition"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "inputCollection",
              "inputParameter",
              "actions",
              "end"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "inputCollection",
              "inputParameter",
              "actions",
              "transition"
            ]
          }
        ]
      }
    },
    "callbackstate": {
      "type": "object",
      "description": "This state performs an action, then waits for the callback event that denotes completion of the action",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique state id",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "description": "State name"
        },
        "type": {
          "type" : "string",
          "const": "callback",
          "description": "State type"
        },
        "action": {
          "description": "Defines the action to be executed",
          "$ref": "#/definitions/action"
        },
        "eventRef": {
          "type" : "string",
          "description": "References an unique callback event name in the defined workflow events"
        },
        "timeout": {
          "type": "string",
          "description": "Time period to wait for incoming events (ISO 8601 format)"
        },
        "eventDataFilter": {
          "description": "Callback event data filter definition",
          "$ref": "#/definitions/eventdatafilter"
        },
        "stateDataFilter": {
          "description": "State data filter definition",
          "$ref": "#/definitions/statedatafilter"
        },
        "onErrors": {
          "type": "array",
          "description": "States error handling and retries definitions",
          "items": {
            "type": "object",
            "$ref": "#/definitions/error"
          }
        },
        "dataSchema": {
          "$ref": "#/definitions/dataschema"
        },
        "transition": {
          "description": "Next transition of the workflow after all the actions have been performed",
          "$ref": "#/definitions/transition"
        },
        "start": {
          "$ref": "#/definitions/start",
          "description": "State start definition"
        },
        "end": {
          "$ref": "#/definitions/end",
          "description": "State end definition"
        },
        "compensatedBy": {
          "type": "string",
          "minLength": 1,
          "description": "Unique Name of a workflow state which is responsible for compensation of this state"
        },
        "usedForCompensation": {
          "type": "boolean",
          "default": false,
          "description": "If true, this state is used to compensate another state. Default is false"
        },
        "metadata": {
          "$ref": "common.json#/definitions/metadata"
        }
      },
      "if": {
        "properties": {
          "usedForCompensation": {
            "const": true
          }
        }
      },
      "then": {
        "required": [
          "name",
          "type",
          "action",
          "eventRef",
          "timeout"
        ]
      },
      "else": {
        "oneOf": [
          {
            "required": [
              "name",
              "type",
              "action",
              "eventRef",
              "timeout",
              "end"
            ]
          },
          {
            "required": [
              "name",
              "type",
              "action",
              "eventRef",
              "timeout",
              "transition"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "action",
              "eventRef",
              "timeout",
              "end"
            ]
          },
          {
            "required": [
              "start",
              "name",
              "type",
              "action",
              "eventRef",
              "timeout",
              "transition"
            ]
          }
        ]
      }
    },
    "start": {
      "oneOf": [
        {
          "type": "boolean",
          "description": "State start definition",
          "default": true
        },
        {
          "type": "object",
          "description": "State start definition",
          "properties": {
            "schedule": {
              "description": "Define the time/repeating intervals at which workflow instances can/should be started",
              "$ref": "#/definitions/schedule"
            }
          },
          "required": [
          ]
        }
      ]
    },
    "schedule": {
      "type": "object",
      "description": "Start state schedule definition",
      "properties": {
        "interval": {
          "type": "string",
          "description":  "Time interval (ISO 8601 format) describing when the workflow starting state is active"
        },
        "cron": {
          "$ref": "#/definitions/crondef"
        },
        "directInvoke": {
          "description": "Defines if workflow instances can be created outside of the interval/cron interval",
          "type": "boolean",
          "default": false
        },
        "timezone": {
          "type": "string",
          "description":  "Timezone name used to evaluate the cron expression. Not used for interval as timezone can be specified there directly. If not specified, should default to local machine timezone."
        }
      },
      "oneOf": [
        {
          "required": [
            "interval"
          ]
        },
        {
          "required": [
            "cron"
          ]
        }
      ]
    },
    "end": {
      "oneOf": [
        {
          "type": "boolean",
          "description": "State end definition",
          "default": true
        },
        {
          "type": "object",
          "description": "State end definition",
          "properties": {
            "terminate": {
              "type": "boolean",
              "default": false,
              "description": "If true, completes all execution flows in the given workflow instance"
            },
            "produceEvents": {
              "type": "array",
              "description": "Used if kind is event. Array of events to be produced",
              "items": {
                "type": "object",
                "$ref": "#/definitions/produceeventdef"
              }
            },
            "compensate": {
              "type": "boolean",
              "default": false,
              "description": "If set to true, triggers workflow compensation before workflow execution completes. Default is false"
            }
          },
          "required": [
          ]
        }
      ]
    },
    "produceeventdef": {
      "type": "object",
      "description": "Produce an event and set its data",
      "properties": {
        "eventRef": {
          "type": "string",
          "description": "References a name of a defined event"
        },
        "data": {
          "type": ["string", "object"],
          "description": "If String, expression which selects parts of the states data output to become the data of the produced event. If object a custom object to become the data of produced event."
        },
        "contextAttributes": {
          "type": "object",
          "description": "Add additional event extension context attributes",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "eventRef"
      ]
    },
    "statedatafilter": {
      "type": "object",
      "properties": {
        "dataInputPath": {
          "type": "string",
          "description": "JsonPath definition that selects parts of the states data input"
        },
        "dataOutputPath": {
          "type": "string",
          "description": "JsonPath definition that selects parts of the states data output"
        }
      },
      "required": []
    },
    "eventdatafilter": {
      "type": "object",
      "properties": {
        "dataOutputPath": {
          "type": "string",
          "description": "JsonPath definition that selects parts of the event data, to be merged with the states data"
        }
      },
      "required": []
    },
    "actiondatafilter": {
      "type": "object",
      "properties": {
        "dataInputPath": {
          "type": "string",
          "description": "JsonPath definition that selects parts of the states data input to be the action data"
        },
        "dataResultsPath": {
          "type": "string",
          "description": "JsonPath definition that selects parts of the actions data result, to be merged with the states data"
        }
      },
      "required": []
    },
    "errordatafilter": {
      "type": "object",
      "properties": {
        "dataOutputPath": {
          "type": "string",
          "description": "JsonPath definition that selects parts of the error data, to be merged with the states data"
        }
      },
      "required": []
    },
    "dataschema": {
      "type": "object",
      "properties": {
        "input": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that workflow/state data input should adhere to"
        },
        "output": {
          "type": "string",
          "format": "uri",
          "description": "URI to JSON Schema that workflow/state data output should adhere to"
        }
      },
      "anyOf": [
        {
          "required": ["input"]
        },
        {
          "required": ["output"]
        }
      ]
    }
  }
}
